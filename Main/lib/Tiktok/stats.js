'use strict';

const axios = require('axios');
const fs = require('fs');
const path = require('path');
const { downloadMedia } = require('../../global.js');
const { key_BG } = require('../../../utils/check.js');

exports.name = '/tiktok/stats';

const DATA_DIR = path.join(__dirname, 'data', 'users');
const CONFIG = {
    API_URL: "https://tikwm.com/api/user/info",
    VIDEO_API_URL: "https://tikwm.com/api/user/posts",
    HEADERS: {
        "Content-Type": "application/x-www-form-urlencoded; charset=UTF-8",
        "Cookie": "current_language=en",
        "User-Agent": "Mozilla/5.0 (Linux; Android 10; K) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/116.0.0.0 Mobile Safari/537.36"
    }
};

// ƒê·∫£m b·∫£o th∆∞ m·ª•c data/users t·ªìn t·∫°i
if (!fs.existsSync(DATA_DIR)) {
    fs.mkdirSync(DATA_DIR, { recursive: true });
}

// L·∫•y ƒë∆∞·ªùng d·∫´n file cho uid c·ª• th·ªÉ
function getUserFilePath(uid) {
    return path.join(DATA_DIR, `${uid}.json`);
}

// T·∫£i d·ªØ li·ªáu t·ª´ file uid c·ª• th·ªÉ
function loadUserStats(uid) {
    try {
        const filePath = getUserFilePath(uid);
        if (fs.existsSync(filePath)) {
            const data = fs.readFileSync(filePath, 'utf8');
            return JSON.parse(data);
        }
    } catch (error) {
        console.error(`‚ùå ƒê·ªçc ${uid}`);
    }
    return null;
}

// L∆∞u d·ªØ li·ªáu v√†o file uid c·ª• th·ªÉ
function saveUserStats(uid, data) {
    try {
        const filePath = getUserFilePath(uid);
        fs.writeFileSync(filePath, JSON.stringify(data, null, 2), 'utf8');
    } catch (error) {
        console.error(`‚ùå Ghi ${uid}`);
    }
}

// Ki·ªÉm tra v√† x√≥a d·ªØ li·ªáu c≈© h∆°n 24h cho uid c·ª• th·ªÉ
function isDataExpired(userData) {
    if (!userData || !userData.timestamp) return true;

    const now = Date.now();
    const oneDayMs = 24 * 60 * 60 * 1000; // 24 gi·ªù

    return (now - userData.timestamp) > oneDayMs;
}

// X√≥a file uid c·ª• th·ªÉ n·∫øu d·ªØ li·ªáu h·∫øt h·∫°n
function cleanExpiredUserData(uid) {
    const userData = loadUserStats(uid);
    if (userData && isDataExpired(userData)) {
        try {
            const filePath = getUserFilePath(uid);
            fs.unlinkSync(filePath);
            console.log(`üóëÔ∏è ${uid}`);
            return true;
        } catch (error) {
            console.error(`‚ùå X√≥a ${uid}`);
        }
    }
    return false;
}

// L·∫•y chi ti·∫øt video c·ªßa user v·ªõi ph√¢n trang
async function getUserVideos(unique_id, limit = 20, cursor = 0) {
    try {
        const response = await axios.post(CONFIG.VIDEO_API_URL, new URLSearchParams({
            unique_id: unique_id,
            count: limit,
            cursor: cursor
        }).toString(), { 
            headers: CONFIG.HEADERS,
            timeout: 15000 
        });

        if (!response.data || !response.data.data || !response.data.data.videos) {
            return { videos: [], hasMore: false, nextCursor: 0 };
        }

        const videos = response.data.data.videos;
        const hasMore = response.data.data.hasMore || videos.length >= limit;
        const nextCursor = cursor + videos.length;
        const videoDetails = [];

        for (let i = 0; i < videos.length; i++) {
            const video = videos[i];
            const videoUrl = `https://www.tiktok.com/@${unique_id}/video/${video.video_id}`;

            // L·∫•y link download b·∫±ng downloadMedia t·ª´ global.js
            let downloadInfo = null;
            try {
                downloadInfo = await downloadMedia(videoUrl);
            } catch (error) {
                console.log(`‚ö†Ô∏è Video ${cursor + i + 1}`);
            }

            videoDetails.push({
                stt: cursor + i + 1,
                video_id: video.video_id,
                title: video.title || "Kh√¥ng c√≥ ti√™u ƒë·ªÅ",
                video_url: videoUrl,
                direct_video_url: video.play || video.wmplay || "",
                download_urls: downloadInfo?.success ? {
                    has_download: true,
                    title: downloadInfo.title || video.title,
                    thumbnail: downloadInfo.thumbnail || video.cover,
                    medias: downloadInfo.medias || []
                } : {
                    has_download: false,
                    fallback_url: video.play || video.wmplay || ""
                },
                cover: video.cover || "",
                duration: video.duration || 0,
                play_count: video.play_count || 0,
                digg_count: video.digg_count || 0,
                comment_count: video.comment_count || 0,
                share_count: video.share_count || 0,
                create_time: video.create_time || 0
            });
        }

        return { videos: videoDetails, hasMore, nextCursor };
    } catch (error) {
        console.error('‚ùå L·ªói video');
        return { videos: [], hasMore: false, nextCursor: 0 };
    }
}

exports.index = async (req, res) => {
    try {
        // X√°c minh API Key
        if (key_BG(req, res)) return;
        
        const { uid, username, continue: continueLoading, help } = req.query;

        // Hi·ªÉn th·ªã help parameters n·∫øu ƒë∆∞·ª£c y√™u c·∫ßu
        if (help === 'true') {
            return res.json({
                endpoint: "/tiktok/stats",
                description: "L·∫•y th·ªëng k√™ v√† video c·ªßa user TikTok v·ªõi h·ªá th·ªëng cache ri√™ng bi·ªát",
                parameters: {
                    required: {
                        username: {
                            type: "string",
                            description: "TikTok username ho·∫∑c unique_id (c√≥ th·ªÉ c√≥ @ ho·∫∑c kh√¥ng)",
                            example: "@nemuieiei3 ho·∫∑c nemuieiei3"
                        },
                        uid: {
                            type: "string", 
                            description: "M√£ x√°c minh duy nh·∫•t ƒë·ªÉ l∆∞u cache ri√™ng bi·ªát",
                            example: "user_verification_123"
                        }
                    },
                    optional: {
                        continue: {
                            type: "boolean",
                            description: "T·∫£i th√™m video ti·∫øp theo (n·∫øu c√≥ s·∫µn cache)",
                            default: "false",
                            example: "true"
                        },
                        help: {
                            type: "boolean",
                            description: "Hi·ªÉn th·ªã th√¥ng tin parameters",
                            example: "true"
                        }
                    }
                },
                usage: {
                    get_stats: "/tiktok/stats?username=@username&uid=verification_code",
                    continue_loading: "/tiktok/stats?username=@username&uid=verification_code&continue=true"
                },
                examples: {
                    basic: "/tiktok/stats?username=@nemuieiei3&uid=user123",
                    continue: "/tiktok/stats?username=@nemuieiei3&uid=user123&continue=true",
                    help_info: "/tiktok/stats?help=true"
                },
                features: {
                    cache_system: "M·ªói UID c√≥ file ri√™ng trong data/users/",
                    auto_expiry: "Cache t·ª± ƒë·ªông h·∫øt h·∫°n sau 24 gi·ªù", 
                    pagination: "T·∫£i 20 video/l·∫ßn, c√≥ th·ªÉ continue ƒë·ªÉ t·∫£i th√™m",
                    download_links: "T·ª± ƒë·ªông l·∫•y link download cho m·ªói video"
                },
                response_structure: {
                    user_info: "Th√¥ng tin profile TikTok",
                    videos: "Danh s√°ch video v·ªõi link download",
                    cache_info: "Th√¥ng tin cache v√† file l∆∞u tr·ªØ"
                }
            });
        }

        if (!username || !uid) {
            return res.status(400).json({ 
                error: "Thi·∫øu tham s·ªë B·∫ÆT BU·ªòC.",
                parameters: {
                    required: {
                        username: {
                            type: "string",
                            description: "TikTok username ho·∫∑c unique_id (c√≥ th·ªÉ c√≥ @ ho·∫∑c kh√¥ng)",
                            example: "@nemuieiei3 ho·∫∑c nemuieiei3"
                        },
                        uid: {
                            type: "string", 
                            description: "M√£ x√°c minh duy nh·∫•t ƒë·ªÉ l∆∞u cache ri√™ng bi·ªát",
                            example: "user_verification_123"
                        }
                    },
                    optional: {
                        continue: {
                            type: "boolean",
                            description: "T·∫£i th√™m video ti·∫øp theo (n·∫øu c√≥ s·∫µn cache)",
                            default: "false",
                            example: "true"
                        },
                        help: {
                            type: "boolean",
                            description: "Hi·ªÉn th·ªã th√¥ng tin parameters",
                            example: "true"
                        }
                    }
                },
                usage: {
                    get_stats: "/tiktok/stats?username=@username&uid=verification_code",
                    continue_loading: "/tiktok/stats?username=@username&uid=verification_code&continue=true"
                },
                examples: {
                    basic: "/tiktok/stats?username=@nemuieiei3&uid=user123",
                    continue: "/tiktok/stats?username=@nemuieiei3&uid=user123&continue=true",
                    help_info: "/tiktok/stats?help=true"
                },
                notes: {
                    cache: "M·ªói uid s·∫Ω c√≥ file d·ªØ li·ªáu ri√™ng bi·ªát trong th∆∞ m·ª•c data/users/",
                    expiry: "D·ªØ li·ªáu cache s·∫Ω h·∫øt h·∫°n sau 24 gi·ªù",
                    videos: "M·ªói l·∫ßn t·∫£i s·∫Ω l·∫•y 20 video, c√≥ th·ªÉ t·∫£i th√™m b·∫±ng continue=true"
                }
            });
        }

        // Ki·ªÉm tra v√† x√≥a d·ªØ li·ªáu h·∫øt h·∫°n
        cleanExpiredUserData(uid);

        // username: TikTok ID th·∫≠t ƒë·ªÉ l·∫•y data
        // uid: M√£ x√°c minh, d√πng l√†m key ƒë·ªÉ l∆∞u cache
        const searchParam = username;
        const userKey = uid;
        const now = Date.now();

        // T·∫£i d·ªØ li·ªáu ri√™ng cho uid n√†y
        let userData = loadUserStats(userKey);

        // Ki·ªÉm tra cache v√† x·ª≠ l√Ω continue loading
        if (userData && !isDataExpired(userData)) {
            if (continueLoading === 'true' && userData.hasMore) {
                // T·∫£i ti·∫øp 20 video ti·∫øp theo
                const tikTokUsername = userData.tiktok_username;
                const currentCursor = userData.nextCursor || userData.videos.length;

                console.log(`üìπ T·∫£i ti·∫øp: ${tikTokUsername}`);

                const moreVideosResult = await getUserVideos(tikTokUsername, 20, currentCursor);

                // C·∫≠p nh·∫≠t data
                userData.videos = [...userData.videos, ...moreVideosResult.videos];
                userData.videos_fetched = userData.videos.length;
                userData.hasMore = moreVideosResult.hasMore;
                userData.nextCursor = moreVideosResult.nextCursor;
                userData.timestamp = now;
                userData.last_updated = new Date(now).toLocaleString('vi-VN', {
                    timeZone: 'Asia/Ho_Chi_Minh'
                });

                saveUserStats(userKey, userData);

                console.log(`üìπ +${moreVideosResult.videos.length} video. T·ªïng: ${userData.videos.length}`);

                return res.json({
                    success: true,
                    cached: false,
                    continued: true,
                    data: userData,
                    message: `ƒê√£ t·∫£i th√™m ${moreVideosResult.videos.length} video. T·ªïng: ${userData.videos.length}`,
                    storage_info: {
                        uid_file: `${userKey}.json`,
                        location: "data/users/"
                    }
                });
            } else {
                console.log(`üìä ${userKey} (cache)`);
                return res.json({
                    success: true,
                    cached: true,
                    data: userData,
                    storage_info: {
                        uid_file: `${userKey}.json`,
                        location: "data/users/"
                    }
                });
            }
        }

        // L·∫•y th√¥ng tin t·ª´ TikTok API
        const response = await axios.post(CONFIG.API_URL, new URLSearchParams({
            unique_id: searchParam
        }).toString(), { 
            headers: CONFIG.HEADERS,
            timeout: 10000 
        });

        if (!response.data || !response.data.data) {
            return res.status(404).json({ 
                error: "Kh√¥ng t√¨m th·∫•y th√¥ng tin ng∆∞·ªùi d√πng TikTok" 
            });
        }

        const tikTokData = response.data.data;
        const tikTokUsername = tikTokData.user?.unique_id || searchParam;

        console.log(`üìπ ${tikTokUsername}`);

        // L·∫•y chi ti·∫øt video c·ªßa user (l·∫•y 20 video ƒë·∫ßu ti√™n)
        const videosResult = await getUserVideos(tikTokUsername, 20, 0);

        console.log(`üìπ ${videosResult.videos.length} video`);

        const userInfo = {
            // Th√¥ng tin x√°c minh v√† TikTok ID
            verification_uid: uid,
            tiktok_username: tikTokUsername,
            tiktok_uid: tikTokData.user?.id || "Kh√¥ng r√µ",

            // Th√¥ng tin profile TikTok
            nickname: tikTokData.user?.nickname || "Kh√¥ng r√µ",
            follower_count: tikTokData.stats?.followerCount || 0,
            following_count: tikTokData.stats?.followingCount || 0,
            video_count: tikTokData.stats?.videoCount || 0,
            heart_count: tikTokData.stats?.heartCount || 0,
            avatar: tikTokData.user?.avatar || "",
            verified: tikTokData.user?.verified || false,

            // Chi ti·∫øt video c·ªßa user
            videos: videosResult.videos,
            videos_fetched: videosResult.videos.length,
            hasMore: videosResult.hasMore,
            nextCursor: videosResult.nextCursor,

            // Th√¥ng tin h·ªá th·ªëng
            search_param: searchParam,
            cache_key: userKey,

            timestamp: now,
            last_updated: new Date(now).toLocaleString('vi-VN', {
                timeZone: 'Asia/Ho_Chi_Minh'
            })
        };

        // L∆∞u v√†o file ri√™ng cho uid n√†y
        saveUserStats(userKey, userInfo);

        console.log(`üìä ${userKey} - ${userInfo.videos_fetched} videos`);

        res.json({
            success: true,
            cached: false,
            data: userInfo,
            message: userInfo.hasMore ? `ƒê√£ t·∫£i ${userInfo.videos_fetched} video. C√≥ th·ªÉ t·∫£i th√™m b·∫±ng c√°ch th√™m &continue=true` : `ƒê√£ t·∫£i h·∫øt ${userInfo.videos_fetched} video`,
            storage_info: {
                uid_file: `${userKey}.json`,
                location: "data/users/",
                note: "M·ªói UID c√≥ file d·ªØ li·ªáu ri√™ng bi·ªát"
            }
        });

    } catch (error) {
        console.error('‚ùå TikTok API');
        if (error.code === 'ECONNABORTED') {
            res.status(504).json({ error: "Timeout khi k·∫øt n·ªëi t·ªõi TikTok API" });
        } else {
            res.status(500).json({ error: "Kh√¥ng th·ªÉ l·∫•y th·ªëng k√™ TikTok" });
        }
    }
};